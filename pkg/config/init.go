// Code generated by congo. DO NOT EDIT.
// source: config.go

package config

import (
	"github.com/BurntSushi/toml"
	"github.com/pkg/errors"
	"io/ioutil"
	"os"
)

type Config interface {
	GetListenGrpcAddr() string
	GetListenHttpAddr() string
	GetKafkaBrokers() string
	GetDatabaseDsn() string
	GetEnableDebugLogs() bool
}

func (d *Desc) GetListenGrpcAddr() string {
	return d.listenGrpcAddr
}

func (d *Desc) GetListenHttpAddr() string {
	return d.listenHttpAddr
}

func (d *Desc) GetKafkaBrokers() string {
	return d.kafkaBrokers
}

func (d *Desc) GetDatabaseDsn() string {
	return d.databaseDsn
}

func (d *Desc) GetEnableDebugLogs() bool {
	return d.enableDebugLogs
}

func Init(configPath string) (Config, error) {
	f, err := os.Open(configPath)
	if err != nil {
		return nil, errors.Wrap(err, "open config file")
	}
	defer f.Close()
	content, err := ioutil.ReadAll(f)
	if err != nil {
		return nil, errors.Wrapf(err, "read config file content")
	}
	c := &Desc{}
	if _, err := toml.Decode(string(content), c); err != nil {
		return nil, errors.Wrapf(err, "decode config file content")
	}
	if err := validate(c); err != nil {
		return nil, errors.Wrapf(err, "validate config")
	}
	return c, nil
}

func validate(d *Desc) (err error) {
	if d.listenGrpcAddr == "" {
		return errors.Wrapf(err, "%q missing", "listen_grpc_addr")
	}
	if d.listenHttpAddr == "" {
		return errors.Wrapf(err, "%q missing", "listen_http_addr")
	}
	if d.kafkaBrokers == "" {
		return errors.Wrapf(err, "%q missing", "kafka_brokers")
	}
	if d.databaseDsn == "" {
		return errors.Wrapf(err, "%q missing", "database_dsn")
	}
	return nil
}
